@using ChatMessage = Models.IAChat.ChatMessage

@inject CytoscapeService CytoscapeService
@inject OpenRouterService OpenRouterService
@inject MindNoseService MindNoseService
@inject DialogService DialogService

<div hidden="@_selectedElementsHidden" style="height: 100%; display: flex; flex-direction: column;">
	<div style="display: flex; justify-content: flex-end; padding: 10px 0;">
		<RadzenButton Icon="Close" Click="ToggleSelectedElements" Variant="Variant.Filled" />
	</div>

	<div style="flex: 1; overflow: hidden;">
		<SelectedElements />
	</div>
</div>

<RadzenStack Style="height: 100%;" Visible="_selectedElementsHidden">
	<RadzenCard Style="height: 100%; display: flex; flex-direction: column;">
		<div style="flex: 1; overflow-y: auto; padding: 10px; display:flex; flex-direction:column;">
			@foreach (var message in _chatMessage.Messages)
			{
				@if (message.Origin == IAChatOrigin.System)
				{
					<div style="width: 100%; display: flex; justify-content: flex-start;">
						<div style="background-color: darkgrey; color: white; 
									width: fit-content; text-align: start; padding: 8px; 
									border-radius: 10px; margin: 4px;">
							<p class="chat" style="margin: 0; white-space: pre-wrap;">@((MarkupString)message.Text!)</p>
							<p style="margin: 0; font-size: 0.8em;">IA Chat</p>
						</div>
					</div>
				}
				else
				{
					<div style="width: 100%; display: flex; justify-content: flex-end;">
						<div style="background-color: darkgray; color: darkgreen; 
									width: fit-content; text-align: end; padding: 8px; 
									border-radius: 10px; margin: 4px;">
							<p class="chat" style="margin: 0; white-space: pre-wrap;">@message.Text</p>
							<p style="margin: 0; font-size: 0.8em;">@message.Origin</p>
						</div>
					</div>
				}
			}
		</div>

		<div style="padding: 10px; border-top: 1px solid #ccc;">
			<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="width:100%;">
				<RadzenLabel Style="width:fit-content; white-space: nowrap;" Text="Select Model: " />
				<RadzenDropDown @bind-Value="@_selectedModelId"
				Data="@_modelsChat"
				TextProperty="@nameof(ModelChat.Name)"
				ValueProperty="@nameof(ModelChat.Id)"
				Style="width: 100%;" />
			</RadzenStack>
			<div style="display: flex; justify-content: flex-end; padding: 10px 0;">
				<RadzenButton Text="Elementos Selecionados" Click="ToggleSelectedElements" />
			</div>

			<RadzenTextArea Placeholder="Escreva sua mensagem." 
			Value="@_textBox.Text" @oninput="e => _textBox.Text = e.Value?.ToString()" 
			@onkeyup="HandleKeyUpAsync" 
			Style="width: 100%;" />

			<div style="display: flex; justify-content: flex-end; padding: 10px 0;">
				<RadzenButton Text="Enviar" Click="SubmitAsync" 
					Style="margin-top: 10px; margin-bottom: 10px;" />
			</div>
		</div>
	</RadzenCard>
</RadzenStack>

@code{
	private bool _selectedElementsHidden = true;
	private List<ModelChat> _modelsChat = new();
	private ChatMessage _chatMessage = new();
	private string _selectedModelId = string.Empty;
	private Message _textBox = new()
	{
		Text = string.Empty,
		Origin = IAChatOrigin.User
	};

	private bool _preventDefaultEnter = false;

	protected override void OnParametersSet()
	{
		var models = OpenRouterService.GetChatModels();
		if (models?.Data != null && models.Data.Any())
		{
			_modelsChat = models.Data.Select(d => new ModelChat(d.Id, d.Name)).ToList();

			var model = _modelsChat.FirstOrDefault(m => m.Id == "mistralai/mistral-small-3.2-24b-instruct");
			if (model is not null)
			{
				_selectedModelId = model.Id;
			}
			else
				_selectedModelId = _modelsChat.First().Id;
		}
	}

	protected override void OnInitialized()
	{
		_chatMessage.Messages.Add(new Message { Text = "Bem-vindo ao MindNose!" });
		_chatMessage.Messages.Add(new Message { Text = "Digite sua dúvida." });

		StateHasChanged();
	}

	private async Task SubmitAsync()
	{
		if(!string.IsNullOrEmpty(_textBox.Text))
			_chatMessage.Messages.Add(new Message { Text = _textBox.Text, Origin = IAChatOrigin.User });

		var selectedElementsHeader = CytoscapeService.GetSelectedElementsHeader();

		var request = new ChatRequest
			{
				ElementsHeader = selectedElementsHeader,
				Message = _textBox,
				Model = _selectedModelId
			};

		_textBox.Text = string.Empty;

		_chatMessage.Messages.Add(new Message { Text = "Pensando..", Origin = IAChatOrigin.System });

		var response = await MindNoseService.SendChatAsync(request);

		_chatMessage.Messages.RemoveAt(_chatMessage.Messages.Count - 1);

		if (!string.IsNullOrEmpty(response))
			_chatMessage.Messages.Add(new Message { Text = Markdown.ToHtml(response), Origin = IAChatOrigin.System });
	}

	private async Task HandleKeyUpAsync(KeyboardEventArgs args)
	{
		if (args.Key == "Enter" && !args.ShiftKey)
		{
			await SubmitAsync();
		}
	}

	private void ToggleSelectedElements()
	{

		_selectedElementsHidden = !_selectedElementsHidden;
		StateHasChanged();
	}
}