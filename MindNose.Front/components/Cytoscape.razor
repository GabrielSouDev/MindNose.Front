@inject IJSRuntime JS
@inject CytoscapeService CytoscapeService
@inject MindNoseService MindNoseService

<RadzenStack Style="height: 100%; margin: 10px;">
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center"  Wrap="FlexWrap.NoWrap">
		<RadzenLabel Style="width:fit-content; white-space: nowrap;" Text="Categoria: " />
		<RadzenDropDown @bind-Value="@_category"
						Data="@_categories"
						TextProperty="@nameof(CategoryResponse.Title)"
						ValueProperty="@nameof(CategoryResponse.Title)" />
		<RadzenLabel Text="Termo: " />
		<RadzenTextBox Value="@_term" @oninput="e => _term = e.Value?.ToString()"
					   @onkeyup="HandleKeyUp" />
	
		<RadzenButton Icon="Search" Click="Search" />
	</RadzenStack>
	<div id="@Id" style="width:100%; height: 100%; border: 1px solid #ccc"></div>
	
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
		<RadzenLabel Text="Layout:&nbsp;&nbsp;&nbsp;" />
		<RadzenSelectBar @bind-Value="_layout" @onclick="ChangeLayout" TValue="CytoscapeLayout">
	        <Items>
				@foreach (CytoscapeLayout layoutOption in Enum.GetValues(typeof(CytoscapeLayout)))
	            {
					<RadzenSelectBarItem Text="@layoutOption.ToString()" Value="@layoutOption" Disabled="false" Visible="true" />
	            }
	        </Items>
	    </RadzenSelectBar>
	</RadzenStack>
</RadzenStack>

@code {
	[Parameter] public string Id { get; set; } = "cy";

	private DotNetObjectReference<Cytoscape>? _dotNetRef;
	private List<CategoryResponse> _categories = new();
	private string _category = string.Empty;
	private string? _term = "Javascript";
	private string _model = "mistralai/mistral-small-3.2-24b-instruct";

	private CytoscapeLayout _layout;

	protected override async Task OnParametersSetAsync()
	{
		_layout = CytoscapeService.GetLayout();
		_categories = CytoscapeService.GetCategories();
		_category = _categories.First().Title;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("cytoscapeInterop.setDotNetReference", _dotNetRef);

			var elements = CytoscapeService.GetElements();
			var selectedElements = CytoscapeService.GetSelectedElements();
			await JS.InvokeVoidAsync("cytoscapeInterop.init", Id, elements, selectedElements, _layout.ToString());
		}
	}

	public async Task Search()
	{
		if (!string.IsNullOrEmpty(_category) && !string.IsNullOrEmpty(_term))
		{
			var request = new
			{
				category = _category,
				term = _term,
				llmModel = _model
			};
			ElementsDTO elements = new();
			try
			{
				elements = await MindNoseService.CreateOrGetLink(request);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Erro ao realizar requisição:\n   {ex.Message}");
				return;
			}

			CytoscapeService.AddElements(elements);
			await JS.InvokeVoidAsync("cytoscapeInterop.add", Id, elements);

			StateHasChanged();
		}
	}

	private async Task HandleKeyUp(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			await Search();
		}
	}

	private async Task ChangeLayout()
	{
		CytoscapeService.SetLayout(_layout);
		await JS.InvokeVoidAsync("cytoscapeInterop.relayout", Id, _layout.ToString());
		StateHasChanged();
	}

	[JSInvokable]
	public Task OnNodeLeftClicked(string nodeId)
	{
		var selectedElements = CytoscapeService.GetSelectedElements();
		if (!selectedElements.Contains(nodeId))
		{
			CytoscapeService.AddSelectedElement(nodeId);
		}else
		{
			CytoscapeService.RemoveSelectedElement(nodeId);
		}
		return Task.CompletedTask;
	}

	[JSInvokable]
	public Task OnNodeRightClicked(string nodeId)
	{
		Console.WriteLine($"Clique direito em: {nodeId}");
		return Task.CompletedTask;
	}
}