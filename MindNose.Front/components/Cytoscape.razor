@inject IJSRuntime JS
@inject CytoscapeService CytoscapeService
@inject MindNoseService MindNoseService

<RadzenStack Style="height: 100%; margin: 10px;">
	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
		<RadzenLabel Style="width:fit-content; white-space: nowrap;" Text="Categoria: " />
		<RadzenDropDown @bind-Value="@_category"
						Data="@_categories"
						TextProperty="@nameof(CategoryResponse.Title)"
						ValueProperty="@nameof(CategoryResponse.Title)" />
		<RadzenLabel Text="Termo: " />
		<RadzenTextBox Value="@_term" @oninput="e => _term = e.Value?.ToString()"
					   @onkeyup="HandleKeyUp" />

		<RadzenButton Icon="Search" Click="@(() => Search(null))" />
	</RadzenStack>

	<div @oncontextmenu:preventDefault id="@Id" style="width:100%; height: 100%; border: 1px solid #ccc">
		<div style="
			display: @( _isLoading ? "flex" : "none" );
			position: absolute;
			inset: 0; /* top:0; left:0; right:0; bottom:0 */
			background-color: rgba(255, 255, 255, 0.7);
			backdrop-filter: saturate(50%);
			justify-content: center;
			align-items: center;
			font-size: 2rem;
			color: #333;
			z-index: 10;
		">
			<div>Pensando<span class="typing">...</span></div>
		</div>
	</div>

	<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Wrap="FlexWrap.NoWrap">
		<RadzenLabel Text="Layout:&nbsp;&nbsp;&nbsp;" />
		<RadzenSelectBar @bind-Value="_layout" @onclick="ChangeLayout" TValue="CytoscapeLayout">
			<Items>
				@foreach (CytoscapeLayout layoutOption in Enum.GetValues(typeof(CytoscapeLayout)))
				{
					<RadzenSelectBarItem Text="@layoutOption.ToString()" Value="@layoutOption" Disabled="false" Visible="true" />
				}
			</Items>
		</RadzenSelectBar>
	</RadzenStack>
</RadzenStack>

@code {
	[Parameter] public string Id { get; set; } = "cy";

	private DotNetObjectReference<Cytoscape>? _dotNetRef;
	private ElementsDTO _elements = new();
	private List<CategoryResponse> _categories = new();
	private string _category = string.Empty;
	private string? _term = "Javascript";
	private string _model = "mistralai/mistral-small-3.2-24b-instruct";
	private bool _isLoading = true; 

	private CytoscapeLayout _layout;

	protected override async Task OnParametersSetAsync()
	{
		_layout = CytoscapeService.GetLayout();
		_categories = CytoscapeService.GetCategories();
		_category = _categories.First().Title;
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_dotNetRef = DotNetObjectReference.Create(this);
			await JS.InvokeVoidAsync("cytoscapeInterop.setDotNetReference", _dotNetRef);

			_elements = CytoscapeService.GetElements();
			var selectedElements = CytoscapeService.GetSelectedElements();
			await JS.InvokeVoidAsync("cytoscapeInterop.init", Id, _elements, selectedElements, _layout.ToString());

			_isLoading = false;
			StateHasChanged();
		}
	}

	public async Task Search(string? nodeId = null)
	{
		if (_isLoading) return;

		_isLoading = true;
		StateHasChanged(); 
		await Task.Yield();        // dá chance pro browser pintar antes de iniciar o trabalho assíncrono pesado

		try
		{
			if (!string.IsNullOrEmpty(_category) && (!string.IsNullOrEmpty(_term) || nodeId is not null))
			{
				string termRequest = string.Empty;
				if (!string.IsNullOrEmpty(_term))
					termRequest = _term;

				if (nodeId is not null)
				{
					var selectedElement = _elements.Nodes.Find(n => n.Data.Id == nodeId);
					termRequest = selectedElement!.Data.Extra!["Title"].ToString()!;
				}

				var request = new
				{
					category = _category,
					term = termRequest,
					llmModel = _model
				};

				ElementsDTO elements = new();
				try
				{
					elements = await MindNoseService.CreateOrGetLink(request);
				}
				catch (Exception ex)
				{
					Console.WriteLine($"Erro ao realizar requisição:\n   {ex.Message}");
					return;
				}

				CytoscapeService.AddElements(elements);
				_elements.Nodes.AddRange(elements.Nodes);
				_elements.Edges.AddRange(elements.Edges);
				await JS.InvokeVoidAsync("cytoscapeInterop.add", Id, elements);
			}
		}
		finally
		{
			_isLoading = false;
			StateHasChanged();
		}
	}


	private async Task HandleKeyUp(KeyboardEventArgs args)
	{
		if (args.Key == "Enter")
		{
			await Search();
		}
	}

	private async Task ChangeLayout()
	{
		CytoscapeService.SetLayout(_layout);
		await JS.InvokeVoidAsync("cytoscapeInterop.relayout", Id, _layout.ToString());
		StateHasChanged();
	}

	[JSInvokable]
	public Task OnNodeLeftClicked(string nodeId)
	{
		var selectedElements = CytoscapeService.GetSelectedElements();
		if (!selectedElements.Contains(nodeId))
		{
			CytoscapeService.AddSelectedElement(nodeId);
		}
		else
		{
			CytoscapeService.RemoveSelectedElement(nodeId);
		}
		return Task.CompletedTask;
	}

	[JSInvokable]
	public async Task OnNodeRightClicked(string nodeId)
	{
		await Search(nodeId);
	}
}
