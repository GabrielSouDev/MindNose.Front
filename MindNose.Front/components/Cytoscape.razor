@inject IJSRuntime JS
@inject CytoscapeService CytoscapeService
@inject MindNoseService MindNoseService

<div style="display: flex; flex-direction:row; text-align: center; align-items:center;">
    <RadzenLabel Text="Categoria: " />
    <RadzenTextBox @bind-Value="_category" />

    <RadzenLabel Text="Termo: " />
    <RadzenTextBox @bind-Value="_term" />

    <RadzenButton Click="Search" />
</div>

<div id="@Id" style="width:100%; height: 90%; border: 1px solid #ccc"></div>

<div style="display: flex; flex-direction:row; width: fit-content; text-align: center; align-items:center;">
	<RadzenLabel Text="Layout:&nbsp;&nbsp;&nbsp;" />
	<RadzenSelectBar @bind-Value="_layout" @onclick="ChangeLayout" TValue="CytoscapeLayout">
        <Items>
			@foreach (CytoscapeLayout layoutOption in Enum.GetValues(typeof(CytoscapeLayout)))
            {
				<RadzenSelectBarItem Text="@layoutOption.ToString()" Value="@layoutOption" Disabled="false" Visible="true" />
            }
        </Items>
    </RadzenSelectBar>
</div>''

@code {
	[Parameter] public string Id { get; set; } = "cy";

	private string _category = "Programação";
	private string _term = "Javascript";
	private string _model = "mistralai/mistral-small-3.2-24b-instruct";

	private CytoscapeLayout _layout;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var elements = CytoscapeService.GetElements();
			_layout = CytoscapeService.GetLayout();

			await JS.InvokeVoidAsync("cytoscapeInterop.init", Id, elements, _layout.ToString());
			StateHasChanged();
		}
	}

	public async Task Search()
	{
		if (!string.IsNullOrEmpty(_category) && !string.IsNullOrEmpty(_term))
		{
			var request = new
			{
				category = _category,
				term = _term,
				llmModel = _model
			};
			ElementsDTO elements = new();
			try
			{
				elements = await MindNoseService.CreateOrGetLink(request);
			}
			catch (Exception ex)
			{
				Console.WriteLine($"Erro ao realizar requisição:\n   {ex.Message}");
				return;
			}

			CytoscapeService.AddElements(elements);
			await JS.InvokeVoidAsync("cytoscapeInterop.add", Id, elements);

			StateHasChanged();
		}
	}

	private async Task ChangeLayout()
	{
		CytoscapeService.SetLayout(_layout);
		await JS.InvokeVoidAsync("cytoscapeInterop.relayout", Id, _layout.ToString());
		StateHasChanged();
	}
}