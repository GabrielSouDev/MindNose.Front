<RadzenStack Gap="2rem">
    <!-- Filtros -->
    <RadzenCard Style="padding: 1rem;">
        <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem" Wrap="FlexWrap.Wrap">
            <RadzenTextBox @bind-Value="filterName" Placeholder="Filtrar por nome" Style="width: 200px;" Change="@((_) => ApplyFilter())" />
            <RadzenDropDown @bind-Value="selectedModality" Data="@modalities" Placeholder="Modalidade" AllowClear="true" Style="width: 200px;" Change="@((_) => ApplyFilter())" />
            <RadzenDropDown @bind-Value="selectedContextRange" Data="@contextRanges" Placeholder="Contexto mínimo" AllowClear="true" Style="width: 200px;" Change="@((_) => ApplyFilter())" />
            <RadzenDropDown @bind-Value="selectedPriceRange" Data="@priceRanges" Placeholder="Faixa de preço" Style="width: 200px;" Change="@((_) => ApplyFilter())" />
            <RadzenDropDown @bind-Value="selectedModeration" Data="@moderationOptions" Placeholder="Moderação" Style="width: 150px;" Change="@((_) => ApplyFilter())" />
            <RadzenDropDown @bind-Value="selectedColumns" Data="@visibleColumns.Keys.ToList()" Placeholder="Selecionar colunas" Style="width: 300px;" Multiple="true" Change="@((_) => UpdateVisibleColumns())" />
            <RadzenButton Text="Aplicar Filtro" Click="@ApplyFilter" Style="margin-left: auto;" />
        </RadzenStack>
    </RadzenCard>

    <!-- Tabela -->
    @if (filteredModels != null)
    {
        <RadzenDataGrid Data="@filteredModels" TItem="Model"
                        ColumnWidth="200px"
                        AllowPaging="true"
                        PageSize="@pageSize"
                        PageSizeChanged="@((int size) => pageSize = size)"
                        PageSizeOptions="@pageSizeOptions"
                        PagerPosition="PagerPosition.Bottom"
                        AllowSorting="true"
                        Style="height: auto; min-height: 500px;">
            <Columns>
                @foreach (var column in visibleColumns.Keys)
                {
                    if (!visibleColumns[column]) continue;

                    <RadzenDataGridColumn Title="@GetPrettyColumnName(column)" Property="@GetPropertyPath(column)">
                        <Template Context="model">
                            <span title="@GetColumnValue(model, column)">
                                @GetColumnValue(model, column)
                            </span>
                        </Template>
                    </RadzenDataGridColumn>
                }
            </Columns>
        </RadzenDataGrid>
    }
</RadzenStack>

@code {
    [Parameter] public ModelResponse Models { get; set; } = new();
    private List<Model> filteredModels = new();
    private List<string> modalities = new();
    private List<string> selectedColumns = new();

    private string filterName = string.Empty;
    private string? selectedModality;
    private string? selectedPriceRange;
    private string? selectedModeration;
    private string? selectedContextRange;

    private int pageSize = 50;
    private List<int> pageSizeOptions = new() { 10, 20, 50, 100, 200, 500 };

    private Dictionary<string, bool> visibleColumns = new()
    {
        { "Id", false }, { "Name", true }, { "ContextLength", true }, { "Description", false },
        { "Modality", true }, { "InputModalities", false }, { "OutputModalities", false },
        { "Tokenizer", false }, { "InstructType", false }, { "Prompt", true },
        { "Completion", true }, { "Request", false }, { "InputCacheRead", false }, { "InputCacheWrite", false }, 
        { "Audio", false }, { "Image", false },
        { "WebSearch", false }, { "InternalReasoning", false },
        { "IsModerated", true }, { "TopProviderContextLength", false },
        { "MaxCompletionTokens", false }, { "PerRequestLimits", false },
        { "Created", true }
    };

    private List<string> priceRanges = new()
    {
        "Todos", "Grátis", "Até 0.0000001", "0.0000001 - 0.000001",
        "0.000001 - 0.00001", "0.00001 - 0.0001", "0.0001 - 0.001",
        "0.001 - 0.01", "0.01 - 0.1", "Acima de 0.1"
    };

    private List<string> moderationOptions = new() { "Todos", "Moderado", "Não moderado" };
    private List<string> contextRanges = new()
    {
        "Até 4096", "4096 - 8192", "8192 - 32768", "32768 - 100000", "Acima de 100000"
    };

    protected override void OnParametersSet()
    {
        if (Models?.Data != null)
        {
            filteredModels = Models.Data;

            modalities = Models.Data
                .Select(m => m.Architecture?.Modality)
                .Where(m => !string.IsNullOrWhiteSpace(m))
                .Distinct()
                .OrderBy(m => m)
                .ToList();

            selectedColumns = visibleColumns.Where(kvp => kvp.Value).Select(kvp => kvp.Key).ToList();
        }
    }

    private void UpdateVisibleColumns()
    {
        foreach (var key in visibleColumns.Keys.ToList())
            visibleColumns[key] = selectedColumns.Contains(key);
    }

    private void ApplyFilter()
    {
        if (Models?.Data == null) return;

        filteredModels = Models.Data.Where(model =>
        {
            var preco = ParseDecimalSafe(model.Pricing?.Request);
            var contexto = model.ContextLength ?? 0;

            bool matchName = string.IsNullOrWhiteSpace(filterName) || model.Name?.Contains(filterName, StringComparison.OrdinalIgnoreCase) == true;
            bool matchModality = string.IsNullOrEmpty(selectedModality) || model.Architecture?.Modality == selectedModality;

            bool matchPreco = selectedPriceRange switch
            {
                "Grátis" => preco == 0,
                "Até 0.0000001" => preco <= 0.0000001m,
                "0.0000001 - 0.000001" => preco > 0.0000001m && preco <= 0.000001m,
                "0.000001 - 0.00001" => preco > 0.000001m && preco <= 0.00001m,
                "0.00001 - 0.0001" => preco > 0.00001m && preco <= 0.0001m,
                "0.0001 - 0.001" => preco > 0.0001m && preco <= 0.001m,
                "0.001 - 0.01" => preco > 0.001m && preco <= 0.01m,
                "0.01 - 0.1" => preco > 0.01m && preco <= 0.1m,
                "Acima de 0.1" => preco > 0.1m,
                _ => true
            };

            bool matchModeration = selectedModeration switch
            {
                "Moderado" => model.TopProvider?.IsModerated == true,
                "Não moderado" => model.TopProvider?.IsModerated == false,
                _ => true
            };

            bool matchContext = selectedContextRange switch
            {
                "Até 4096" => contexto <= 4096,
                "4096 - 8192" => contexto > 4096 && contexto <= 8192,
                "8192 - 32768" => contexto > 8192 && contexto <= 32768,
                "32768 - 100000" => contexto > 32768 && contexto <= 100000,
                "Acima de 100000" => contexto > 100000,
                _ => true
            };

            return matchName && matchModality && matchPreco && matchModeration && matchContext;
        }).ToList();
    }

    private decimal ParseDecimalSafe(string? value)
    {
        if (string.IsNullOrWhiteSpace(value)) return 0;
        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out var result))
            return result;
        return 0;
    }

    private string GetColumnValue(Model model, string column)
    {
        switch (column)
        {
            case "Id": return model.Id ?? "";
            case "Name": return model.Name ?? "";
            case "Created":
                return model.Created.HasValue
                    ? DateTimeOffset.FromUnixTimeSeconds(model.Created.Value).ToLocalTime().ToString("g")
                    : "";
            case "Description": return model.Description ?? "";
            case "ContextLength": return model.ContextLength?.ToString("N0") ?? "—";
            case "Modality": return model.Architecture?.Modality ?? "—";
            case "InputModalities": return string.Join(", ", model.Architecture?.InputModalities ?? new()) ?? "—";
            case "OutputModalities": return string.Join(", ", model.Architecture?.OutputModalities ?? new()) ?? "—";
            case "Tokenizer": return model.Architecture?.Tokenizer ?? "—";
            case "InstructType": return model.Architecture?.InstructType?.ToString() ?? "—";
            case "Prompt": return FormatPrice(model.Pricing?.Prompt);
            case "Completion": return FormatPrice(model.Pricing?.Completion);
            case "InputCacheRead": return FormatPrice(model.Pricing?.InputCacheRead);
            case "InputCacheWrite": return FormatPrice(model.Pricing?.InputCacheWrite);
            case "Audio": return FormatPrice(model.Pricing?.Audio, false);
            case "Request": return FormatPrice(model.Pricing?.Request);
            case "Image": return FormatPrice(model.Pricing?.Image, true);
            case "WebSearch": return FormatPrice(model.Pricing?.WebSearch, false);
            case "InternalReasoning": return FormatPrice(model.Pricing?.InternalReasoning);
            case "IsModerated": return model.TopProvider?.IsModerated == true ? "✅" : "❌";
            case "TopProviderContextLength": return model.TopProvider?.ContextLength?.ToString("N0") ?? "—";
            case "MaxCompletionTokens": return model.TopProvider?.MaxCompletionTokens?.ToString() ?? "—";
            case "PerRequestLimits": return model.PerRequestLimits?.ToString() ?? "—";
            default: return "";
        }
    }

    private string FormatPrice(string? value, bool isPerToken = true)
    {
        if (string.IsNullOrWhiteSpace(value)) return "—";

        if (decimal.TryParse(value, NumberStyles.Any, CultureInfo.InvariantCulture, out var d))
        {
            if (d == 0) return "0";

            var price = isPerToken ? d * 1_000_000 : d;

            if (isPerToken)
            {
                return $"${price:0.######}/M tokens";
                
            }
            else
                return $"${price:0.######}/K tokens";
        }

        return value;
    }


    private string GetPrettyColumnName(string column)
    {
        return column switch
        {
            "Id" => "ID",
            "Name" => "Nome",
            "Created" => "Criado Em",
            "Description" => "Descrição",
            "ContextLength" => "Comprimento do Contexto",
            "Modality" => "Modalidade",
            "InputModalities" => "Modalidades de Entrada",
            "OutputModalities" => "Modalidades de Saída",
            "Tokenizer" => "Tokenizer",
            "InstructType" => "Tipo de Instrução",
            "Prompt" => "Preço Prompt",
            "Completion" => "Preço Completion",
            "InputCacheRead" => "Input Cache Read",
            "InputCacheWrite" => "Input Cache Write",
            "Audio" => "Audio",
            "Request" => "Preço Request",
            "Image" => "Preço Image",
            "WebSearch" => "Web Search",
            "InternalReasoning" => "Internal Reasoning",
            "IsModerated" => "Moderado?",
            "TopProviderContextLength" => "Contexto TopProvider",
            "MaxCompletionTokens" => "Max Completion Tokens",
            "PerRequestLimits" => "Limites por Request",
            _ => column
        };
    }

    private string GetPropertyPath(string column)
    {
        return column switch
        {
            "Modality" => "Architecture.Modality",
            "InputModalities" => "Architecture.InputModalities",
            "OutputModalities" => "Architecture.OutputModalities",
            "Tokenizer" => "Architecture.Tokenizer",
            "InstructType" => "Architecture.InstructType",
            "IsModerated" => "TopProvider.IsModerated",
            "TopProviderContextLength" => "TopProvider.ContextLength",
            "MaxCompletionTokens" => "TopProvider.MaxCompletionTokens",
            "Prompt" => "Pricing.Prompt",
            "Completion" => "Pricing.Completion",
            "Request" => "Pricing.Request",
            "InputCacheRead" => "Pricing.InputCacheRead",
            "InputCacheWrite" => "Pricing.InputCacheWrite",
            "Audio" => "Pricing.Audio",
            "Image" => "Pricing.Image",
            "WebSearch" => "Pricing.WebSearch",
            "InternalReasoning" => "Pricing.InternalReasoning",
            _ => column
        };
    }

}
