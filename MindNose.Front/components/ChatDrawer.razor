@using ChatMessage = Models.IAChat.ChatMessage
@inject OpenRouterService OpenRouterService

<RadzenStack Style="height: 100%;">
    <RadzenCard Style="height: 100%; display: flex; flex-direction: column;">
        <div style="flex: 1; overflow-y: auto; padding: 10px; display:flex; flex-direction:column;">
            @foreach (var message in _chatMessage.Messages)
            {
                @if (message.Origin == IAChatOrigin.System)
                {
                    <div style="width: 100%; display: flex; justify-content: flex-start;">
                        <div style="background-color: palevioletred; color: white; 
									width: fit-content; text-align: start; padding: 8px; 
									border-radius: 10px; margin: 4px;">
							<p style="margin: 0; white-space: pre-wrap;">@message.Text</p>
                            <p style="margin: 0; font-size: 0.8em;">IA Chat</p>
                        </div>
                    </div>
                }
                else
                {
                    <div style="width: 100%; display: flex; justify-content: flex-end;">
                        <div style="background-color: lightgreen; color: darkgreen; 
									width: fit-content; text-align: end; padding: 8px; 
									border-radius: 10px; margin: 4px;">
							<p style="margin: 0; white-space: pre-wrap;">@message.Text</p>
                            <p style="margin: 0; font-size: 0.8em;">@message.Origin</p>
                        </div>
                    </div>
                }
            }
        </div>

        <div style="padding: 10px; border-top: 1px solid #ccc;">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Style="width:100%;">
                <RadzenLabel Style="width:fit-content; white-space: nowrap;" Text="Select Model: " />
				<RadzenDropDown @bind-Value="@_selectedModelId"
								Data="@_modelsChat"
								TextProperty="@nameof(ModelChat.Name)"
								ValueProperty="@nameof(ModelChat.Id)"
								Style="width: 100%;" />
            </RadzenStack>

			<RadzenTextArea Placeholder="Escreva sua mensagem." 
				Value="@_textBox.Text" @oninput="e => _textBox.Text = e.Value?.ToString()" 
				@onkeyup="HandleKeyUp" 
				Style="width: 100%;" />
            <RadzenButton Text="Enviar" Click="Submit"
				Style="margin-top: 10px; margin-bottom: 10px;" />
        </div>
    </RadzenCard>
</RadzenStack>

@code{
	private List<ModelChat> _modelsChat = new();
	private ChatMessage _chatMessage = new();
	private string _selectedModelId = string.Empty;
	private Message _textBox = new()
	{
		Text = string.Empty,
		Origin = IAChatOrigin.User
	};

	private bool _preventDefaultEnter = false;

	protected override void OnParametersSet()
	{
		var models = OpenRouterService.GetModels();
		if (models?.Data != null && models.Data.Any())
		{
			_modelsChat = models.Data.Select(d => new ModelChat(d.Id, d.Name)).ToList();

			var model = _modelsChat.FirstOrDefault(m => m.Id == "mistralai/mistral-small-3.2-24b-instruct");
			if (model is not null)
			{
				_selectedModelId = model.Id;
			}
			else
				_selectedModelId = _modelsChat.First().Id;
		}
	}

	protected override void OnInitialized()
	{
		_chatMessage.Messages.Add(new Message { Text = "Bem-vindo ao MindNose!" });
		_chatMessage.Messages.Add(new Message { Text = "Digite sua dúvida." });

		StateHasChanged();
	}

	private void Submit()
	{
		if(!string.IsNullOrEmpty(_textBox.Text))
			_chatMessage.Messages.Add(new Message { Text = _textBox.Text, Origin = IAChatOrigin.User });

		_textBox.Text = string.Empty;
	}

	private void HandleKeyUp(KeyboardEventArgs args)
	{
		if (args.Key == "Enter" && !args.ShiftKey)
		{
			Submit();
		}
	}
}