@inject CytoscapeService CytoscapeService

@page "/WeigthsCharts"

<PageTitle>Weigths Charts - MindNose</PageTitle>

<RadzenStack style="min-height: fit-content;">
    <RadzenRow style="min-height: fit-content;">
        <RadzenColumn Size="12" SizeLG="12" style="min-height: fit-content;">
			<h2>Similarity Charts</h2>
			@foreach (var chartElements in _chartTables)
			{
                <WeigthsChart ChartTable="chartElements" />
			}
		</RadzenColumn>
	</RadzenRow>
</RadzenStack>



@code{
    private ElementsDTO _elements = new();
    private List<ChartTable> _chartTables = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            _elements = CytoscapeService.GetElements();
            ChartElementInitialize();
            StateHasChanged();
        }
    }

    private void ChartElementInitialize()
    {
        foreach (var node in _elements.Nodes)
        {
            var edges = _elements.Edges
                .Where(e => e.Data.Source == node.Data.Id)
                .ToList();

            var newChartElements = new List<ChartElement>();

            foreach (var edge in edges)
            {
                if (edge.Data.Target == null || edge.Data.Extra == null)
                    continue;

                var targetNode = _elements.Nodes.FirstOrDefault(n => n.Data.Id == edge.Data.Target);
                if (targetNode?.Data?.Extra == null)
                    continue;

                if (!edge.Data.Extra.TryGetValue("WeightStartToEnd", out var weightObj) || weightObj == null)
                    continue;

                if (!float.TryParse(weightObj.ToString(), out float value))
                    continue;

                string targetTitle = targetNode.Data.Extra.TryGetValue("Title", out var tVal)
                    ? tVal?.ToString() ?? ""
                    : "";

                float min = 0.0f;
                float max = 0.9f;
                float normalizedValue = ((value - min) / (max - min));
                normalizedValue = Math.Clamp(normalizedValue, 0f, 1.0f);

                newChartElements.Add(new ChartElement
                {
                    Target = targetTitle,
                    WeigthPorcent = normalizedValue
                });
            }

            if (newChartElements.Count == 0)
                continue;

            newChartElements = newChartElements
                .OrderByDescending(c => c.WeigthPorcent)
                .ToList();

            string sourceTitle = node.Data.Extra.TryGetValue("Title", out var sVal)
                ? sVal?.ToString() ?? ""
                : "";

            _chartTables.Add(new ChartTable
            {
                Source = sourceTitle,
                ElementsTarget = newChartElements
            });

            _chartTables = _chartTables.OrderBy(c => c.Source).ToList();
        }
    }
}